// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Area {
  id              String          @id @default(uuid())
  name            String          @unique
  slug            String          @unique
  technologies    Technology[]    // Relationship one-to-many with Technology,
}

model Technology {
  id              String          @id @default(uuid())
  name            String          @unique
  slug            String          @unique
  description     String          @default("")
  icon            String    
  iconName        String       
  areaId          String          // Foreign key
  area            Area            @relation(fields: [areaId], references: [id], onDelete: Cascade) // Relationship many-to-one with Area
  quiz            Quiz[]          // Relationship one-to-many with Quiz
}

model Quiz {
  id              String          @id @default(uuid())
  title           String          @unique
  slug            String          @unique
  description     String          @default("")
  createdAt       DateTime        @default(now())
  technologyId    String

  technology      Technology      @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  questions       Question[]     
}

model Question {
  id              String         @id @default(uuid())
  quizId          String
  quiz            Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText    String
  createdAt       DateTime       @default(now())
  answerExplain   String      
  codeExample     String?    

  answers         Answer[]       
}

model Answer {
  id             String         @id @default(uuid())
  questionId     String
  answerText     String
  isCorrect      Boolean  

  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
}


// Auth.js
model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}